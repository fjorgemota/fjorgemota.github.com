<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fernando Jorge Mota</title><link href="http://fjorgemota.com/" rel="alternate"></link><link href="http://fjorgemota.com/atom/tag/ferramentas.xml" rel="self"></link><id>http://fjorgemota.com/</id><updated>2013-06-05T21:23:05-03:00</updated><entry><title>Require.JS - Carregando scripts na hora certa</title><link href="http://fjorgemota.com/artigo/requirejs-carregando-scripts-na-hora-certa/" rel="alternate"></link><updated>2013-06-05T21:23:05-03:00</updated><author><name>Fernando Jorge Mota</name></author><id>tag:fjorgemota.com,2013-06-05:artigo/requirejs-carregando-scripts-na-hora-certa/</id><summary type="html">&lt;p&gt;Quando você faz uma aplicação web, é comum carregar a página de scripts. Atualmente, isso é considerado um grave problema, ainda mais considerando que a maioria dos aplicativos web também &lt;strong&gt;devem&lt;/strong&gt; ter suporte mobile para fazerem sucesso, e considerando que usuários de aplicações móveis, e até mesmo usuários de aplicações web voltadas para desktop, geralmente não contam com uma boa conexão, pelo menos no Brasil. É focando nessas aplicações que a dica de hoje é voltada especialmente para o Require.JS, um poderoso carregador JavaScript que implementa a API &lt;abbr title="Asynchronous Module Definition"&gt;AMD&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;Mas antes você deve estar se perguntando.. &lt;a href="http://fjorgemota.com/artigo/o-que-e-amd-javascript/"&gt;O que é AMD? Leia a resposta neste post que preparamos para você.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Agora que você já viu as vantagens em usar a API AMD, você já tem uma visão básica de como usar o Require.JS, que implementa a API, e, cá entre nós, &lt;strong&gt;implementa muito bem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Alguns outros detalhes sobre Require.js que você &lt;strong&gt;PRECISA&lt;/strong&gt; saber:&lt;/p&gt;
&lt;h2&gt;Definição de "módulo principal"&lt;/h2&gt;
&lt;p&gt;No Require.JS, você pode definir o módulo principal para ser carregado em uma página diretamente na chamada ao carregamento do &lt;strong&gt;Require.js&lt;/strong&gt;. Se nós tivessemos um arquivo &lt;code&gt;index.html&lt;/code&gt; cujo módulo principal fosse o &lt;code&gt;foo.js&lt;/code&gt;, implementado acima, por exemplo, poderiamos fazê-lo da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(...)
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(path to Require.js)/require.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-main=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
(...)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vale lembrar, entretanto, que tal chamada é totalmente &lt;strong&gt;opcional&lt;/strong&gt;, ainda mais se você quiser &lt;a href="http://requirejs.org/docs/api.html#config"&gt;&lt;strong&gt;configurar&lt;/strong&gt;&lt;/a&gt; mais profundamente o Require.JS, o que na maioria das vezes...vale a pena! ;)&lt;/p&gt;
&lt;h2&gt;Arquivos JavaScript que não suportam AMD&lt;/h2&gt;
&lt;p&gt;O Require.JS é uma biblioteca tão poderosa que é capaz de usar &lt;strong&gt;normalmente&lt;/strong&gt; arquivos JavaScripts que não usam a API AMD. Para isso, no entanto, é necessário uma configuração especial, mas ainda assim fácil de usar. &lt;a href="http://requirejs.org/docs/api.html#config-shim"&gt;Aprenda sobre ela aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pré-Otimização!&lt;/h2&gt;
&lt;p&gt;Não quer que o Require.JS carregue os vários arquivos necessários para exibir uma página no momento do carregamento da página? Ok! Você pode pré-otimizar e juntar todos os arquivos seguindo &lt;strong&gt;exatamente&lt;/strong&gt; sua ordem de dependência através de um &lt;strong&gt;otimizador muito poderoso chamado r.js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ficou interessado? &lt;a href="http://requirejs.org/docs/optimization.html"&gt;Leia a documentação do r.js aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E por enquanto é isso, pessoal! Abaixo, segue os tradicionais links para a biblioteca:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Site Oficial:&lt;/strong&gt;  &lt;a href="http://requirejs.org/"&gt;http://requirejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentação:&lt;/strong&gt; &lt;a href="http://requirejs.org/docs/api.html"&gt;http://requirejs.org/docs/api.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub:&lt;/strong&gt; &lt;a href="http://github.com/jrburke/requirejs"&gt;http://github.com/jrburke/requirejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="JavaScript"></category><category term="Ferramentas"></category><category term="Web Resouces JavaScript"></category><category term="Scripts"></category></entry><entry><title>Angular.JS - Aplicativos estruturados com facilidade</title><link href="http://fjorgemota.com/artigo/angularjs-aplicativos-estruturados-com-facilidade/" rel="alternate"></link><updated>2013-06-04T19:58:28-03:00</updated><author><name>Fernando Jorge Mota</name></author><id>tag:fjorgemota.com,2013-06-04:artigo/angularjs-aplicativos-estruturados-com-facilidade/</id><summary type="html">&lt;p&gt;&lt;img src="/static/images/scripts/angularjs.png" align="right" /&gt;As vezes, no processo de criação de um aplicativo web, podemos perder um tempo precioso em coisas que podem já terem sido criadas por outro programador da comunidade opensource, na forma de biblioteca, e todo mundo sabe disso. Com o &lt;strong&gt;Angular.js&lt;/strong&gt;, biblioteca Javascript criada pelo Google, esta percepção fica ainda mais vísivel: Você percebe que, literalmente, Backbone.js e o conceito de "views" é coisa do passado, literalmente.&lt;/p&gt;
&lt;p&gt;E quando eu digo "coisa do passado", eu &lt;strong&gt;não&lt;/strong&gt; estou exagerando. &lt;strong&gt;Angular.js&lt;/strong&gt; é o tipo de biblioteca que parece meio estranha no começo, mais ou menos como &lt;strong&gt;jQuery&lt;/strong&gt;, cuja utilidade muitas vezes era questionada com perguntas como "Mas Javascript puro já faz isso", mas nesse caso envolvendo o Backbone.js.&lt;/p&gt;
&lt;p&gt;A idéia do Angular.js, pelo treinamento prévio que fiz (sou auto-ditada, aí ajuda um pouco..), é tornar transparente para o usuário questões como modelos, views e até mesmo controllers. Funciona da seguinte forma: Templates &lt;strong&gt;não&lt;/strong&gt; existem - são substituidos por blocos HTML com determinados atributos (ng-*) -, modelos também &lt;strong&gt;não&lt;/strong&gt;, no seu lugar estão objetos comuns, assim como coleções, que são ~substituidas~ por arrays. Quanto aos controllers? São funções básicas botando ordem &lt;strong&gt;EM TUDO&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O grande diferencial (e uma das coisas que eu mais gostei, aliás) no Angular.js é que tudo tem o seu &lt;strong&gt;escopo&lt;/strong&gt;. O que quero dizer? Quero dizer que diferentes elementos de um mesmo aplicativo (imagine, por exemplo, duas tabelas distintas) possuem diferentes controladores, modelos e views, tudo salvo em um &lt;strong&gt;escopo&lt;/strong&gt; próprio ao qual o controlador, e as views.&lt;/p&gt;
&lt;p&gt;Enfim, isso é uma abstração básica do que eu entendi sobre a biblioteca. Minha opinião sobre isso tudo? &lt;strong&gt;MUITO&lt;/strong&gt; maneiro! &lt;/p&gt;
&lt;p&gt;Se você quiser saber mais, leia este post do &lt;strong&gt;&lt;a href="http://tableless.com.br/criando-uma-aplicacao-simples-com-angularjs/"&gt;Tableless&lt;/a&gt;&lt;/strong&gt;, ou aguarde mais um pouco que no futuro pode sair um post muito mais completo aqui no site especialmente dedicado ao Angular.js. ;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Site Oficial&lt;/strong&gt;: &lt;a href="http://angularjs.org"&gt;http://angularjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentação&lt;/strong&gt;: &lt;a href="http://docs.angularjs.org/"&gt;http://docs.angularjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href="http://twitter.com/angularjs"&gt;http://twitter.com/angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demonstração&lt;/strong&gt;: &lt;a href="http://angularjs.org"&gt;http://angularjs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Scripts"></category><category term="JavaScript"></category><category term="Ferramentas"></category><category term="Web Resouces JavaScript"></category><category term="HTML5"></category></entry><entry><title>QTip2 - Poderosos Tooltips com jQuery</title><link href="http://fjorgemota.com/artigo/qtip2-poderosos-tooltips-com-jquery/" rel="alternate"></link><updated>2013-06-03T21:30:11-03:00</updated><author><name>Fernando Jorge Mota</name></author><id>tag:fjorgemota.com,2013-06-03:artigo/qtip2-poderosos-tooltips-com-jquery/</id><summary type="html">&lt;p&gt;&lt;img src="/static/images/scripts/qtip2.png" alt="QTip2 - Logotipo" align="right"/&gt;Vez ou outra surge a necessidade de apontarmos para o usuário exatamente um local, ou permitir uma descrição maior sobre um determinado elemento de uma página. Para isso, foram criados os tooltips, pequenos balões que aparecem durante a interação (clique, mouseover..etc) com elementos da tela. &lt;/p&gt;
&lt;p&gt;Numa página web, este procedimento geralmente é feito com HTML, CSS e Javascript. O &lt;a href="http://twitter.github.com/bootstrap"&gt;Twitter Bootstrap&lt;/a&gt;, por exemplo, implementa isso nativamente, embora não tenha lá muitos recursos para a área.&lt;/p&gt;
&lt;p&gt;É para suprir tal necessidade que surgiu a &lt;strong&gt;&lt;a href="http://craigsworks.com/projects/qtip2"&gt;QTip2&lt;/a&gt;&lt;/strong&gt;, uma biblioteca poderosa, disponibilizada como plugin para o &lt;strong&gt;jQuery&lt;/strong&gt;, que é fácil de usar e gratuita e que, além de tooltips, pode criar &lt;em&gt;overlays&lt;/em&gt;, disponibilizar mensagens (em um esquema similar ao jGrowl, que será apresentado em breve) e exibir caixas de alerta, confirmação e prompt de forma inline (usando overlays).&lt;/p&gt;
&lt;p&gt;Veja o site oficial, a documentação e os exemplos para conhecer mais sobre a biblioteca, e bons códigos! :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Site Oficial&lt;/strong&gt;: &lt;a href="http://craigsworks.com/projects/qtip2"&gt;http://craigsworks.com/projects/qtip2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentação&lt;/strong&gt;: &lt;a href="http://craigsworks.com/projects/qtip2/docs/"&gt;http://craigsworks.com/projects/qtip2/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demonstrações&lt;/strong&gt;: &lt;a href="http://craigsworks.com/projects/qtip2/demos/"&gt;http://craigsworks.com/projects/qtip2/demos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href="https://github.com/craga89/qtip2"&gt;https://github.com/craga89/qtip2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Scripts"></category><category term="JavaScript"></category><category term="Ferramentas"></category><category term="Web Resouces JavaScript"></category><category term="Web Resources jQuery"></category></entry><entry><title>5 Razões para AMAR CoffeeScript</title><link href="http://fjorgemota.com/artigo/5-razoes-para-amar-coffeescript/" rel="alternate"></link><updated>2013-06-02T19:09:07-03:00</updated><author><name>Fernando Jorge Mota</name></author><id>tag:fjorgemota.com,2013-06-02:artigo/5-razoes-para-amar-coffeescript/</id><summary type="html">&lt;p&gt;Durante o desenvolvimento de um site, é comum nos depararmos com códigos que as vezes poderiam ser diminuidos e simplificados brutalmente, simplificando a programação e a leitura de um código. No Javascript, exemplos de código assim seriam coisas como definições de variáveis, funções, funções que aceitam múltiplos argumentos, loops em objetos, e etc. Pensando nisso, o programador &lt;a href="(http://github.com/jashkenas)"&gt;Jeremy Ashkenas&lt;/a&gt; resolveu, em 24 de dezembro de 2009, criar a linguagem &lt;strong&gt;CoffeeScript&lt;/strong&gt;, que será apresentada neste post.&lt;/p&gt;
&lt;p&gt;CoffeeScript é uma linguagem de programação simples, "pequena" - como apresentada no &lt;a href="http://coffeescript.org"&gt;site oficial&lt;/a&gt; -, e tem como seu maior mérito a compilação pura e eficaz para..Javascript. Mas você deve estar se perguntando: Por quê eu usaria algo que apenas compila o que eu já posso fazer manualmente? Bom, a resposta é simples e sagaz: Atalhos e uma sintaxe mais simples! :D&lt;/p&gt;
&lt;p&gt;CoffeeScript proporciona uma série de eficientes e poderosos "atalhos" para o uso com Javascript, um código Javascript assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em CoffeeScript fica assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;hello = &lt;/span&gt;&lt;span class="nf"&gt;(name=&amp;quot;World&amp;quot;) -&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Bem&lt;/strong&gt; mais simples, né?&lt;/p&gt;
&lt;p&gt;Mas CoffeeScript também tem outras vantagens bem práticas. E, abaixo, listarei &lt;strong&gt;5 razões&lt;/strong&gt; para você &lt;strong&gt;AMAR&lt;/strong&gt; CoffeeScript.&lt;/p&gt;
&lt;h2&gt;1 - Suporte a classes&lt;/h2&gt;
&lt;p&gt;Para mim, JavaScript sempre foi deficiente em algo &lt;strong&gt;MUITO&lt;/strong&gt; simples e que simplesmente &lt;u&gt;não pode&lt;/u&gt; deixar de ser usado no mundo moderno: Classes.&lt;/p&gt;
&lt;p&gt;Ok, ok, JavaScript &lt;em&gt;até tem&lt;/em&gt; um suporte básico a classes, embora não seja muito explícito e não seja nada.....amigável.&lt;/p&gt;
&lt;p&gt;Em JavaScript, para você criar uma classe &lt;code&gt;Pessoa&lt;/code&gt; com o método &lt;code&gt;getNome&lt;/code&gt; e &lt;code&gt;setNome&lt;/code&gt;, com um construtor que recebe o parâmetro &lt;code&gt;nome&lt;/code&gt; tendo como valor padrão &lt;code&gt;Sem Nome&lt;/code&gt;, você precisa programar algo assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sem Nome&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece uma simples função, né? Agora vejamos com CoffeeScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;
    &lt;span class="nv"&gt;constructor: &lt;/span&gt;&lt;span class="nf"&gt;(@nome=&amp;quot;Sem Nome&amp;quot;) -&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;getNome: &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;@nome&lt;/span&gt;
    &lt;span class="nv"&gt;setNome: &lt;/span&gt;&lt;span class="nf"&gt;(@nome) -&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais...explícito, né? E você pode testar no &lt;a href="http://coffeescript.org"&gt;site oficial&lt;/a&gt; do CoffeeScript: O resultado é &lt;strong&gt;o mesmo&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;2 - Herança de classes&lt;/h2&gt;
&lt;p&gt;Não ficou contente com o primeiro motivo? Vamos para o segundo, então! Com Javascript, a herança simplesmente &lt;strong&gt;não&lt;/strong&gt; fica clara. Por quê? Pois &lt;strong&gt;não existe&lt;/strong&gt; forma &lt;strong&gt;nativa&lt;/strong&gt; e &lt;strong&gt;amigável&lt;/strong&gt; de herdar uma classe feita puramente em JavaScript.&lt;/p&gt;
&lt;p&gt;Para exemplificar sem precisar ficar enrolando, segue um exemplo usando a classe Pessoa acima:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSerie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSerie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feio, né?&lt;/p&gt;
&lt;p&gt;E o pior é que, além de feio, é &lt;strong&gt;confuso&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No CoffeeScript, uma forma mais simples, amigável e &lt;strong&gt;eficiente&lt;/strong&gt; de fazer o mesmo serviço seria fazendo o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Aluno&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;
    &lt;span class="nv"&gt;constructor: &lt;/span&gt;&lt;span class="nf"&gt;(@nome, @serie) -&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="nx"&gt;@nome&lt;/span&gt;
    &lt;span class="nv"&gt;getSerie: &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;@serie&lt;/span&gt;
    &lt;span class="nv"&gt;setSerie: &lt;/span&gt;&lt;span class="nf"&gt;(@serie) -&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Muito mais simples, né? :)&lt;/p&gt;
&lt;h2&gt;3 - Argumentos padrão&lt;/h2&gt;
&lt;p&gt;Não sei se você já percebeu, mas no CoffeeScript, assim como no Python, você pode facilmente usar valores padrões para os seus argumentos de uma maneira bem prática.&lt;/p&gt;
&lt;p&gt;No JavaScript, para setar um argumento padrão, &lt;em&gt;geralmente&lt;/em&gt; é usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já no CoffeeScript, é usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;helloworld = &lt;/span&gt;&lt;span class="nf"&gt;(nome=&amp;quot;World&amp;quot;) -&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É uma abordagem mais simples, similar ao Python, e bem prática, né?&lt;/p&gt;
&lt;h2&gt;4 - Funções que aceitam vários argumentos&lt;/h2&gt;
&lt;p&gt;No JavaScript, para criar uma função que é capaz de lidar com vários argumentos, você &lt;u&gt;precisa&lt;/u&gt; lidar com a variável &lt;code&gt;arguments&lt;/code&gt;, para acessar tudo o que você &lt;strong&gt;não&lt;/strong&gt; definiu necessariamente como argumento. Assim, uma função &lt;code&gt;helloworld&lt;/code&gt; que dá um &lt;code&gt;alert("Hello "+argumento);&lt;/code&gt; para absolutamente todos os argumentos ficaria mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;argumento&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;argumento&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, a função não é tão complicada assim, mas vejamos sua variante no CoffeeScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;helloworld = &lt;/span&gt;&lt;span class="nf"&gt;(argumentos...) -&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;argumento&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;argumentos&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;argumento&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É, eu prefiro CoffeeScript. :P&lt;/p&gt;
&lt;h2&gt;5 - Concatenação!&lt;/h2&gt;
&lt;p&gt;Se tem uma coisa que eu não acho bonito é string concatenada em uma só linha. Prefiro, muito mais, separar em várias linhas, do que concatenar tudo em uma única e gigante linha que não é nada prática e amigável. &lt;/p&gt;
&lt;p&gt;No JavaScript, infelizmente, isso é comum, e é meio chato para o desenvolvimento, pois, quando você quer concatenar uma string que já possui aspas, fica "meio" confuso.&lt;/p&gt;
&lt;p&gt;Vejamos um exemplo de função que recebe como argumento uma string &lt;code&gt;tagName&lt;/code&gt;, um objeto &lt;code&gt;attributes&lt;/code&gt; e retorna uma string com uma tag HTML com todos os atributos especificados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;lt;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: Sim, eu sei que tem outras formas de fazer uma tarefa semelhante, mas quero apenas mostrar um exemplo usando concatenação.&lt;/p&gt;
&lt;p&gt;No CoffeeScript, a &lt;strong&gt;MESMA&lt;/strong&gt; função ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;generate = &lt;/span&gt;&lt;span class="nf"&gt;(tagName, attributes) -&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;html = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;
        &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E o resultado da função &lt;strong&gt;É IGUAL&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Mais prático, né?&lt;/p&gt;
&lt;p&gt;Bom, essas são apenas 5 das inúmeras razões pelo qual eu acho &lt;strong&gt;CoffeeScript&lt;/strong&gt; infinitas vezes mais prático e mais simples do que JavaScript. &lt;/p&gt;
&lt;p&gt;Se você quiser saber mais sobre a linguagem, acesse o &lt;a href="http://coffeescript.org"&gt;site oficial&lt;/a&gt; do CoffeeScript e se encante com esta linguagem cujo uso só cresce nos projetos e em toda a internet.&lt;/p&gt;
&lt;p&gt;Até a próxima, pessoal!&lt;/p&gt;</summary><category term="CoffeeScript"></category><category term="JavaScript"></category><category term="Programação"></category><category term="Ferramentas"></category></entry></feed>