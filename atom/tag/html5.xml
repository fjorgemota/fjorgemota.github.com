<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fernando Jorge Mota</title><link href="http://fjorgemota.com/" rel="alternate"></link><link href="http://fjorgemota.com/atom/tag/html5.xml" rel="self"></link><id>http://fjorgemota.com/</id><updated>2013-06-04T19:58:28-03:00</updated><entry><title>Angular.JS - Aplicativos estruturados com facilidade</title><link href="http://fjorgemota.com/artigo/angularjs-aplicativos-estruturados-com-facilidade/" rel="alternate"></link><updated>2013-06-04T19:58:28-03:00</updated><author><name>Fernando Jorge Mota</name></author><id>tag:fjorgemota.com,2013-06-04:artigo/angularjs-aplicativos-estruturados-com-facilidade/</id><summary type="html">&lt;p&gt;&lt;img src="/static/images/scripts/angularjs.png" align="right" /&gt;As vezes, no processo de criação de um aplicativo web, podemos perder um tempo precioso em coisas que podem já terem sido criadas por outro programador da comunidade opensource, na forma de biblioteca, e todo mundo sabe disso. Com o &lt;strong&gt;Angular.js&lt;/strong&gt;, biblioteca Javascript criada pelo Google, esta percepção fica ainda mais vísivel: Você percebe que, literalmente, Backbone.js e o conceito de "views" é coisa do passado, literalmente.&lt;/p&gt;
&lt;p&gt;E quando eu digo "coisa do passado", eu &lt;strong&gt;não&lt;/strong&gt; estou exagerando. &lt;strong&gt;Angular.js&lt;/strong&gt; é o tipo de biblioteca que parece meio estranha no começo, mais ou menos como &lt;strong&gt;jQuery&lt;/strong&gt;, cuja utilidade muitas vezes era questionada com perguntas como "Mas Javascript puro já faz isso", mas nesse caso envolvendo o Backbone.js.&lt;/p&gt;
&lt;p&gt;A idéia do Angular.js, pelo treinamento prévio que fiz (sou auto-ditada, aí ajuda um pouco..), é tornar transparente para o usuário questões como modelos, views e até mesmo controllers. Funciona da seguinte forma: Templates &lt;strong&gt;não&lt;/strong&gt; existem - são substituidos por blocos HTML com determinados atributos (ng-*) -, modelos também &lt;strong&gt;não&lt;/strong&gt;, no seu lugar estão objetos comuns, assim como coleções, que são ~substituidas~ por arrays. Quanto aos controllers? São funções básicas botando ordem &lt;strong&gt;EM TUDO&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O grande diferencial (e uma das coisas que eu mais gostei, aliás) no Angular.js é que tudo tem o seu &lt;strong&gt;escopo&lt;/strong&gt;. O que quero dizer? Quero dizer que diferentes elementos de um mesmo aplicativo (imagine, por exemplo, duas tabelas distintas) possuem diferentes controladores, modelos e views, tudo salvo em um &lt;strong&gt;escopo&lt;/strong&gt; próprio ao qual o controlador, e as views.&lt;/p&gt;
&lt;p&gt;Enfim, isso é uma abstração básica do que eu entendi sobre a biblioteca. Minha opinião sobre isso tudo? &lt;strong&gt;MUITO&lt;/strong&gt; maneiro! &lt;/p&gt;
&lt;p&gt;Se você quiser saber mais, leia este post do &lt;strong&gt;&lt;a href="http://tableless.com.br/criando-uma-aplicacao-simples-com-angularjs/"&gt;Tableless&lt;/a&gt;&lt;/strong&gt;, ou aguarde mais um pouco que no futuro pode sair um post muito mais completo aqui no site especialmente dedicado ao Angular.js. ;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Site Oficial&lt;/strong&gt;: &lt;a href="http://angularjs.org"&gt;http://angularjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentação&lt;/strong&gt;: &lt;a href="http://docs.angularjs.org/"&gt;http://docs.angularjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href="http://twitter.com/angularjs"&gt;http://twitter.com/angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demonstração&lt;/strong&gt;: &lt;a href="http://angularjs.org"&gt;http://angularjs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Scripts"></category><category term="JavaScript"></category><category term="Ferramentas"></category><category term="Web Resouces JavaScript"></category><category term="HTML5"></category></entry></feed>