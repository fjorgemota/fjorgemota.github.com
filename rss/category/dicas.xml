<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Fernando Jorge Mota</title><link>http://fjorgemota.com/</link><description></description><atom:link href="http://fjorgemota.com/rss/category/dicas.xml" rel="self"></atom:link><lastBuildDate>Wed, 05 Jun 2013 21:24:09 -0300</lastBuildDate><item><title>O que é AMD? (JavaScript)</title><link>http://fjorgemota.com/artigo/o-que-e-amd-javascript/</link><description>&lt;p&gt;Quando você vai implementar um grande web app, é comum possuir uma &lt;strong&gt;grande&lt;/strong&gt; quantidade de arquivos JavaScript. Naturalmente (à menos que você seja louco em botar tudo em um só arquivo), os arquivos estabelecem &lt;strong&gt;grande&lt;/strong&gt; relação de dependência entre si, sendo necessário que seja estabelecido, em algum lugar, o carregamento dos módulos na ordem correta. E, dependendo do tamanho da aplicação, isso pode ficar &lt;strong&gt;muito&lt;/strong&gt; trabalhoso e ocasionar muitos problemas, e é por causa disso que hoje vamos responder a seguinte pergunta: &lt;strong&gt;O que é AMD?&lt;/strong&gt; E dica: Não estamos falando sobre a fabricante de processadores.&lt;/p&gt;
&lt;p&gt;AMD é um jeito de definir módulos em JavaScript. Por módulos, entenda arquivos que devem realizar apenas uma função ou grupo de funções do mesmo gênero (pois compartilham um mesmo &lt;strong&gt;escopo&lt;/strong&gt;). &lt;/p&gt;
&lt;p&gt;Considere, por exemplo, que temos um arquivo chamado &lt;code&gt;hello.js&lt;/code&gt; com esta única função:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Guest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usando AMD, o arquivo ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Guest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que a primeira vantagem que o uso de AMD em seus arquivos é o escopo: Os arquivos não tem acesso inicial ao escopo global, ficando emglobados dentro de uma mesma função, assim como imposto pelos &lt;strong&gt;controllers&lt;/strong&gt; do &lt;a href="http://fjorgemota.com/artigo/angularjs-aplicativos-estruturados-com-facilidade/"&gt;Angular.js&lt;/a&gt;, do qual falamos ontem.&lt;/p&gt;
&lt;p&gt;Além disso, digamos que nós temos um arquivo chamado &lt;code&gt;foo.js&lt;/code&gt; que &lt;strong&gt;precisa&lt;/strong&gt; da função &lt;code&gt;hello&lt;/code&gt;. Sem AMD, o arquivo chamaria a função assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What&amp;#39;s your name?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Hmmm&lt;/em&gt;..Meio confuso, né? E se a função simplesmente não existir ou não tiver sido carregada ainda?&lt;/p&gt;
&lt;p&gt;Com AMD, a história é diferente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What&amp;#39;s your name?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que no código acima, o arquivo &lt;strong&gt;especifica&lt;/strong&gt; como requerimento o &lt;strong&gt;módulo&lt;/strong&gt; &lt;code&gt;hello.js&lt;/code&gt; (a extensão &lt;code&gt;.js&lt;/code&gt; é sub-entendida no AMD), e recebe como parâmetro justamente o resultado retornado pelo módulo. Isso possibilita uma &lt;strong&gt;enorme&lt;/strong&gt; quantidade de possibilidades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Carregamento de módulos recursivos&lt;/strong&gt; - Se o módulo &lt;code&gt;hello&lt;/code&gt; possuisse alguma outra dependência, seria possível ao carregador AMD &lt;strong&gt;carregar&lt;/strong&gt; tais dependências &lt;strong&gt;sem&lt;/strong&gt; executar a função e &lt;strong&gt;sem&lt;/strong&gt; provocar exceptions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Otimização&lt;/strong&gt; - Se um módulo não é carregado, porque vamos utilizá-lo?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt; - Pois na maioria das bibliotecas (como na Require.js, abordada neste artigo) você pode definir alias para os módulos com facilidade.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualidade de código&lt;/strong&gt; - As dependências ficam &lt;strong&gt;totalmente&lt;/strong&gt; explicitas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Legal mas..como usar AMD? Simples! Use uma biblioteca que implemente a API, e seja feliz! Pessoalmente, eu indico MUITO a &lt;a href="http://fjorgemota.com/artigo/requirejs-carregando-scripts-na-hora-certa/"&gt;Require.js&lt;/a&gt;, mas você é livre para escolher a que lhe parecer mais interessante.&lt;/p&gt;
&lt;p&gt;Aliás, falando em bibliotecas, veja algumas bibliotecas que &lt;strong&gt;já&lt;/strong&gt; suportam nativamente AMD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jQuery &lt;/li&gt;
&lt;li&gt;Dojo&lt;/li&gt;
&lt;li&gt;E a maior parte das mais recentes bibliotecas JavaScript publicadas na internet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bom, é isso! Dúvidas? Deixe nos comentários! &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Jorge Mota</dc:creator><pubDate>Wed, 05 Jun 2013 21:24:09 -0300</pubDate><guid>tag:fjorgemota.com,2013-06-05:artigo/o-que-e-amd-javascript/</guid><category>JavaScript</category><category>Dicas</category></item><item><title>5 Razões para AMAR CoffeeScript</title><link>http://fjorgemota.com/artigo/5-razoes-para-amar-coffeescript/</link><description>&lt;p&gt;Durante o desenvolvimento de um site, é comum nos depararmos com códigos que as vezes poderiam ser diminuidos e simplificados brutalmente, simplificando a programação e a leitura de um código. No Javascript, exemplos de código assim seriam coisas como definições de variáveis, funções, funções que aceitam múltiplos argumentos, loops em objetos, e etc. Pensando nisso, o programador &lt;a href="(http://github.com/jashkenas)"&gt;Jeremy Ashkenas&lt;/a&gt; resolveu, em 24 de dezembro de 2009, criar a linguagem &lt;strong&gt;CoffeeScript&lt;/strong&gt;, que será apresentada neste post.&lt;/p&gt;
&lt;p&gt;CoffeeScript é uma linguagem de programação simples, "pequena" - como apresentada no &lt;a href="http://coffeescript.org"&gt;site oficial&lt;/a&gt; -, e tem como seu maior mérito a compilação pura e eficaz para..Javascript. Mas você deve estar se perguntando: Por quê eu usaria algo que apenas compila o que eu já posso fazer manualmente? Bom, a resposta é simples e sagaz: Atalhos e uma sintaxe mais simples! :D&lt;/p&gt;
&lt;p&gt;CoffeeScript proporciona uma série de eficientes e poderosos "atalhos" para o uso com Javascript, um código Javascript assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em CoffeeScript fica assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;hello = &lt;/span&gt;&lt;span class="nf"&gt;(name=&amp;quot;World&amp;quot;) -&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Bem&lt;/strong&gt; mais simples, né?&lt;/p&gt;
&lt;p&gt;Mas CoffeeScript também tem outras vantagens bem práticas. E, abaixo, listarei &lt;strong&gt;5 razões&lt;/strong&gt; para você &lt;strong&gt;AMAR&lt;/strong&gt; CoffeeScript.&lt;/p&gt;
&lt;h2&gt;1 - Suporte a classes&lt;/h2&gt;
&lt;p&gt;Para mim, JavaScript sempre foi deficiente em algo &lt;strong&gt;MUITO&lt;/strong&gt; simples e que simplesmente &lt;u&gt;não pode&lt;/u&gt; deixar de ser usado no mundo moderno: Classes.&lt;/p&gt;
&lt;p&gt;Ok, ok, JavaScript &lt;em&gt;até tem&lt;/em&gt; um suporte básico a classes, embora não seja muito explícito e não seja nada.....amigável.&lt;/p&gt;
&lt;p&gt;Em JavaScript, para você criar uma classe &lt;code&gt;Pessoa&lt;/code&gt; com o método &lt;code&gt;getNome&lt;/code&gt; e &lt;code&gt;setNome&lt;/code&gt;, com um construtor que recebe o parâmetro &lt;code&gt;nome&lt;/code&gt; tendo como valor padrão &lt;code&gt;Sem Nome&lt;/code&gt;, você precisa programar algo assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sem Nome&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece uma simples função, né? Agora vejamos com CoffeeScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;
    &lt;span class="nv"&gt;constructor: &lt;/span&gt;&lt;span class="nf"&gt;(@nome=&amp;quot;Sem Nome&amp;quot;) -&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;getNome: &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;@nome&lt;/span&gt;
    &lt;span class="nv"&gt;setNome: &lt;/span&gt;&lt;span class="nf"&gt;(@nome) -&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais...explícito, né? E você pode testar no &lt;a href="http://coffeescript.org"&gt;site oficial&lt;/a&gt; do CoffeeScript: O resultado é &lt;strong&gt;o mesmo&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;2 - Herança de classes&lt;/h2&gt;
&lt;p&gt;Não ficou contente com o primeiro motivo? Vamos para o segundo, então! Com Javascript, a herança simplesmente &lt;strong&gt;não&lt;/strong&gt; fica clara. Por quê? Pois &lt;strong&gt;não existe&lt;/strong&gt; forma &lt;strong&gt;nativa&lt;/strong&gt; e &lt;strong&gt;amigável&lt;/strong&gt; de herdar uma classe feita puramente em JavaScript.&lt;/p&gt;
&lt;p&gt;Para exemplificar sem precisar ficar enrolando, segue um exemplo usando a classe Pessoa acima:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSerie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Aluno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSerie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feio, né?&lt;/p&gt;
&lt;p&gt;E o pior é que, além de feio, é &lt;strong&gt;confuso&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No CoffeeScript, uma forma mais simples, amigável e &lt;strong&gt;eficiente&lt;/strong&gt; de fazer o mesmo serviço seria fazendo o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Aluno&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;
    &lt;span class="nv"&gt;constructor: &lt;/span&gt;&lt;span class="nf"&gt;(@nome, @serie) -&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="nx"&gt;@nome&lt;/span&gt;
    &lt;span class="nv"&gt;getSerie: &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;@serie&lt;/span&gt;
    &lt;span class="nv"&gt;setSerie: &lt;/span&gt;&lt;span class="nf"&gt;(@serie) -&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Muito mais simples, né? :)&lt;/p&gt;
&lt;h2&gt;3 - Argumentos padrão&lt;/h2&gt;
&lt;p&gt;Não sei se você já percebeu, mas no CoffeeScript, assim como no Python, você pode facilmente usar valores padrões para os seus argumentos de uma maneira bem prática.&lt;/p&gt;
&lt;p&gt;No JavaScript, para setar um argumento padrão, &lt;em&gt;geralmente&lt;/em&gt; é usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já no CoffeeScript, é usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;helloworld = &lt;/span&gt;&lt;span class="nf"&gt;(nome=&amp;quot;World&amp;quot;) -&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É uma abordagem mais simples, similar ao Python, e bem prática, né?&lt;/p&gt;
&lt;h2&gt;4 - Funções que aceitam vários argumentos&lt;/h2&gt;
&lt;p&gt;No JavaScript, para criar uma função que é capaz de lidar com vários argumentos, você &lt;u&gt;precisa&lt;/u&gt; lidar com a variável &lt;code&gt;arguments&lt;/code&gt;, para acessar tudo o que você &lt;strong&gt;não&lt;/strong&gt; definiu necessariamente como argumento. Assim, uma função &lt;code&gt;helloworld&lt;/code&gt; que dá um &lt;code&gt;alert("Hello "+argumento);&lt;/code&gt; para absolutamente todos os argumentos ficaria mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;argumento&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;argumento&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, a função não é tão complicada assim, mas vejamos sua variante no CoffeeScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;helloworld = &lt;/span&gt;&lt;span class="nf"&gt;(argumentos...) -&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;argumento&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;argumentos&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;argumento&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É, eu prefiro CoffeeScript. :P&lt;/p&gt;
&lt;h2&gt;5 - Concatenação!&lt;/h2&gt;
&lt;p&gt;Se tem uma coisa que eu não acho bonito é string concatenada em uma só linha. Prefiro, muito mais, separar em várias linhas, do que concatenar tudo em uma única e gigante linha que não é nada prática e amigável. &lt;/p&gt;
&lt;p&gt;No JavaScript, infelizmente, isso é comum, e é meio chato para o desenvolvimento, pois, quando você quer concatenar uma string que já possui aspas, fica "meio" confuso.&lt;/p&gt;
&lt;p&gt;Vejamos um exemplo de função que recebe como argumento uma string &lt;code&gt;tagName&lt;/code&gt;, um objeto &lt;code&gt;attributes&lt;/code&gt; e retorna uma string com uma tag HTML com todos os atributos especificados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;=&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;lt;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: Sim, eu sei que tem outras formas de fazer uma tarefa semelhante, mas quero apenas mostrar um exemplo usando concatenação.&lt;/p&gt;
&lt;p&gt;No CoffeeScript, a &lt;strong&gt;MESMA&lt;/strong&gt; função ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;generate = &lt;/span&gt;&lt;span class="nf"&gt;(tagName, attributes) -&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;html = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;
        &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E o resultado da função &lt;strong&gt;É IGUAL&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Mais prático, né?&lt;/p&gt;
&lt;p&gt;Bom, essas são apenas 5 das inúmeras razões pelo qual eu acho &lt;strong&gt;CoffeeScript&lt;/strong&gt; infinitas vezes mais prático e mais simples do que JavaScript. &lt;/p&gt;
&lt;p&gt;Se você quiser saber mais sobre a linguagem, acesse o &lt;a href="http://coffeescript.org"&gt;site oficial&lt;/a&gt; do CoffeeScript e se encante com esta linguagem cujo uso só cresce nos projetos e em toda a internet.&lt;/p&gt;
&lt;p&gt;Até a próxima, pessoal!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Jorge Mota</dc:creator><pubDate>Sun, 02 Jun 2013 19:09:07 -0300</pubDate><guid>tag:fjorgemota.com,2013-06-02:artigo/5-razoes-para-amar-coffeescript/</guid><category>CoffeeScript</category><category>JavaScript</category><category>Programação</category><category>Ferramentas</category></item></channel></rss>